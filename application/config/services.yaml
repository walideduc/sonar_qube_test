# Put parameters here that don't need to change on each machine where the app is deployed
#
parameters:
    aws.config:
      region: '%env(AWS_SQS_REGION)%'
      version: 'latest'
      credentials:
        key: '%env(AWS_ACCESS_KEY_ID)%'
        secret: '%env(AWS_SECRET_ACCESS_KEY)%'

    mongodb.config.database.name: 'transactions'
    mongodb.config.transaction.collection.name: 'transactions'



services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Domain\Transaction\Dispatcher\TransactionEventDispatcherInterface:
      class: App\Domain\Transaction\Dispatcher\TransactionEventDispatcherSymfony
      arguments:
        $eventDispatcher: '@Symfony\Component\EventDispatcher\EventDispatcherInterface'

    # Because of the way the library works, we need a new instance of the JsonSchema\Validator for every validator
    json_schema_transaction_message_validator:
      class: JsonSchema\Validator

    app_domain_utility_validator_transaction_message_validator:
        class: App\Domain\Utility\Validator\JsonValidator
        arguments:
          $jsonSchemaPath: '%kernel.project_dir%/vendor/tsi-library/consolidated-transaction/schemas'
          $schemaName: 'TransactionMessageRequest.json'
          $validator: '@json_schema_transaction_message_validator'

    App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber:
        arguments:
          $validator: '@app_domain_utility_validator_transaction_message_validator'

    Aws\Sqs\SqsClient:
        arguments: ['%aws.config%']

    Aws\Sns\SnsClient:
        arguments: ['%aws.config%']


    App\Infrastructure\QueueSystem\Client\ClientInterface:
      class: App\Infrastructure\QueueSystem\Client\SqsClient
      arguments:
        $sqsClient: '@Aws\Sqs\SqsClient'
        $queueUrl: '%env(AWS_SQS_QUEUE)%'

    App\Infrastructure\NotificationSystem\Client\ClientInterface:
      class: App\Infrastructure\NotificationSystem\Client\SnsClient
      arguments:
        $snsClient: '@Aws\Sns\SnsClient'
        $topicUrl: '%env(AWS_SNS_TOPIC)%'

    # We need to declare this service to use it just after
    MongoDB\Client:
      arguments:
        $uri: '%env(MONGO_DB_URI)%'

    App\Domain\Transaction\Repository\TransactionRepository:
      arguments:
        $collection: '@transaction_collection'

    App\Domain\Transaction\Repository\Statistics\Outlets\OutletStatisticRepository:
        arguments:
          $collection: '@transaction_collection'

    App\Infrastructure\NoSqlDatabase\Collection\Factory\MongoDbCollectionFactory: ~

    App\Infrastructure\NotificationSystem\PipelineBuilder\TotalAmountPerOutletForPeriodPipelineBuilderInterface: ~

    transaction_collection:
      class: 'App\Infrastructure\NoSqlDatabase\Collection\MongoDbCollection'
      factory: 'App\Infrastructure\NoSqlDatabase\Collection\Factory\MongoDbCollectionFactory:collection'
      arguments: ['%mongodb.config.database.name%','%mongodb.config.transaction.collection.name%']

    Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydratorInterface:
      class: Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydrator
      arguments:
        $merchantHydrator: '@Tsi\Transaction\Hydrator\Merchant\MerchantHydratorInterface'
        $outletHydrator: '@Tsi\Transaction\Hydrator\Outlet\OutletHydratorInterface'
        $customerHydrator: '@Tsi\Transaction\Hydrator\Customer\CustomerHydratorInterface'
        $voucherHydrator: '@Tsi\Transaction\Hydrator\Voucher\VoucherHydratorInterface'
        $cardHydrator: '@Tsi\Transaction\Hydrator\Card\CardHydratorInterface'

    Tsi\Transaction\Hydrator\Merchant\MerchantHydratorInterface:
      class: Tsi\Transaction\Hydrator\Merchant\MerchantHydrator


    Tsi\Transaction\Hydrator\Outlet\OutletHydratorInterface:
      class: Tsi\Transaction\Hydrator\Outlet\OutletHydrator


    Tsi\Transaction\Hydrator\Customer\CustomerHydratorInterface:
      class: Tsi\Transaction\Hydrator\Customer\CustomerHydrator

    Tsi\Transaction\Hydrator\Voucher\VoucherHydratorInterface:
      class: Tsi\Transaction\Hydrator\Voucher\VoucherHydrator

    Tsi\Transaction\Hydrator\Card\CardHydratorInterface:
      class: Tsi\Transaction\Hydrator\Card\CardHydrator
