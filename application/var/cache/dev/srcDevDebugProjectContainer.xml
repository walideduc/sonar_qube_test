<?xml version="1.0" encoding="utf-8"?>
<container xmlns="http://symfony.com/schema/dic/services" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">
  <parameters>
    <parameter key="kernel.root_dir">/Users/waled/Projects/transaction-service/application/src</parameter>
    <parameter key="kernel.project_dir">/Users/waled/Projects/transaction-service/application</parameter>
    <parameter key="kernel.environment">dev</parameter>
    <parameter key="kernel.debug">true</parameter>
    <parameter key="kernel.name">src</parameter>
    <parameter key="kernel.cache_dir">/Users/waled/Projects/transaction-service/application/var/cache/dev</parameter>
    <parameter key="kernel.logs_dir">/Users/waled/Projects/transaction-service/application/var/log</parameter>
    <parameter key="kernel.bundles" type="collection">
      <parameter key="FrameworkBundle">Symfony\Bundle\FrameworkBundle\FrameworkBundle</parameter>
    </parameter>
    <parameter key="kernel.bundles_metadata" type="collection">
      <parameter key="FrameworkBundle" type="collection">
        <parameter key="path">/Users/waled/Projects/transaction-service/application/vendor/symfony/framework-bundle</parameter>
        <parameter key="namespace">Symfony\Bundle\FrameworkBundle</parameter>
      </parameter>
    </parameter>
    <parameter key="kernel.charset">UTF-8</parameter>
    <parameter key="kernel.container_class">srcDevDebugProjectContainer</parameter>
    <parameter key="container.autowiring.strict_mode">true</parameter>
    <parameter key="container.dumper.inline_class_loader">true</parameter>
    <parameter key="aws.config" type="collection">
      <parameter key="region">%env(AWS_SQS_REGION)%</parameter>
      <parameter key="version">latest</parameter>
      <parameter key="credentials" type="collection">
        <parameter key="key">%env(AWS_ACCESS_KEY_ID)%</parameter>
        <parameter key="secret">%env(AWS_SECRET_ACCESS_KEY)%</parameter>
      </parameter>
    </parameter>
    <parameter key="mongodb.config.database.name">transactions</parameter>
    <parameter key="mongodb.config.transaction.collection.name">transactions</parameter>
    <parameter key="fragment.renderer.hinclude.global_template"></parameter>
    <parameter key="fragment.path">/_fragment</parameter>
    <parameter key="kernel.secret">%env(APP_SECRET)%</parameter>
    <parameter key="kernel.http_method_override">true</parameter>
    <parameter key="kernel.trusted_hosts" type="collection"/>
    <parameter key="kernel.default_locale">en</parameter>
    <parameter key="templating.helper.code.file_link_format">null</parameter>
    <parameter key="debug.file_link_format">null</parameter>
    <parameter key="data_collector.templates" type="collection"/>
    <parameter key="debug.error_handler.throw_at">-1</parameter>
    <parameter key="debug.container.dump">/Users/waled/Projects/transaction-service/application/var/cache/dev/srcDevDebugProjectContainer.xml</parameter>
    <parameter key="router.request_context.host">localhost</parameter>
    <parameter key="router.request_context.scheme">http</parameter>
    <parameter key="router.request_context.base_url"></parameter>
    <parameter key="router.resource">kernel:loadRoutes</parameter>
    <parameter key="router.cache_class_prefix">srcDevDebugProjectContainer</parameter>
    <parameter key="request_listener.http_port">80</parameter>
    <parameter key="request_listener.https_port">443</parameter>
    <parameter key="console.command.ids" type="collection">
      <parameter>console.command.public_alias.App\Command\CreateTransactionCommand</parameter>
    </parameter>
  </parameters>
  <services>
    <service id="service_container" class="Symfony\Component\DependencyInjection\ContainerInterface" public="true" synthetic="true"/>
    <service id="App\Command\CreateTransactionCommand" class="App\Command\CreateTransactionCommand" public="false" autowire="true" autoconfigure="true">
      <tag name="console.command"/>
      <argument type="service" id="App\Domain\Action\FetchRawTransactions\FetchRawTransactions"/>
    </service>
    <service id="App\Controller\DefaultController" class="App\Controller\DefaultController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.service_subscriber.locator" id="service_locator.aqxUcvZ.App\Controller\DefaultController"/>
      <call method="setContainer">
        <argument type="service" id="service_locator.aqxUcvZ.App\Controller\DefaultController"/>
      </call>
    </service>
    <service id="App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" class="App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.service_subscriber.locator" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\ItalyOutlets\IndexController"/>
      <call method="setContainer">
        <argument type="service" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\ItalyOutlets\IndexController"/>
      </call>
    </service>
    <service id="App\Controller\Rqms\Statistics\Outlets\IndexController" class="App\Controller\Rqms\Statistics\Outlets\IndexController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.service_subscriber.locator" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Outlets\IndexController"/>
      <argument type="service" id="App\Domain\Transaction\Service\Statistics\Outlets\OutletStatisticService"/>
      <call method="setContainer">
        <argument type="service" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Outlets\IndexController"/>
      </call>
    </service>
    <service id="App\Controller\Rqms\Statistics\Search\IndexController" class="App\Controller\Rqms\Statistics\Search\IndexController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.service_subscriber.locator" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Search\IndexController"/>
      <argument type="service" id="App\Domain\Transaction\Service\TransactionService"/>
      <call method="setContainer">
        <argument type="service" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Search\IndexController"/>
      </call>
    </service>
    <service id="App\Controller\Rqms\Statistics\TPOnline\IndexController" class="App\Controller\Rqms\Statistics\TPOnline\IndexController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.service_subscriber.locator" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\TPOnline\IndexController"/>
      <call method="setContainer">
        <argument type="service" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\TPOnline\IndexController"/>
      </call>
    </service>
    <service id="App\Controller\Rqms\Statistics\Transaction\IndexController" class="App\Controller\Rqms\Statistics\Transaction\IndexController" public="true" autowire="true" autoconfigure="true">
      <tag name="controller.service_arguments"/>
      <tag name="container.service_subscriber"/>
      <tag name="container.service_subscriber.locator" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Transaction\IndexController"/>
      <argument type="service" id="App\Domain\Transaction\Service\TransactionService"/>
      <call method="setContainer">
        <argument type="service" id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Transaction\IndexController"/>
      </call>
    </service>
    <service id="App\Domain\Action\FetchRawTransactions\FetchRawTransactions" class="App\Domain\Action\FetchRawTransactions\FetchRawTransactions" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="App\Infrastructure\QueueSystem\Client\ClientInterface"/>
      <argument type="service" id="App\Domain\Transaction\Dispatcher\TransactionEventDispatcherInterface"/>
      <argument type="service" id="App\Domain\Transaction\Event\TransactionCreatedEvent\Collection\TransactionCreatedEventCollection"/>
    </service>
    <service id="App\Domain\Transaction\Dispatcher\TransactionEventDispatcherSymfony" class="App\Domain\Transaction\Dispatcher\TransactionEventDispatcherSymfony" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="App\Domain\Transaction\Entity\Outlet\Statistic\OutletStatisticEntity" class="App\Domain\Transaction\Entity\Outlet\Statistic\OutletStatisticEntity" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Entity\Search\Request\SearchRequestEntity" class="App\Domain\Transaction\Entity\Search\Request\SearchRequestEntity" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Event\ConsolidatedTransactionCreatedEvent" class="App\Domain\Transaction\Event\ConsolidatedTransactionCreatedEvent" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Event\TransactionCreatedEvent\Collection\TransactionCreatedEventCollection" class="App\Domain\Transaction\Event\TransactionCreatedEvent\Collection\TransactionCreatedEventCollection" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Event\TransactionCreatedEvent\TransactionCreatedEvent" class="App\Domain\Transaction\Event\TransactionCreatedEvent\TransactionCreatedEvent" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Repository\Exception\TransactionRepositoryException" class="App\Domain\Transaction\Repository\Exception\TransactionRepositoryException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Repository\Statistics\Outlets\Exception\OutletNotFoundException" class="App\Domain\Transaction\Repository\Statistics\Outlets\Exception\OutletNotFoundException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Repository\Statistics\Outlets\OutletStatisticRepository" class="App\Domain\Transaction\Repository\Statistics\Outlets\OutletStatisticRepository" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="transaction_collection"/>
      <argument type="service" id="App\Infrastructure\NoSqlDatabase\PipelineBuilder\Statistic\TotalAmountPerOutletForPeriodPipelineBuilder"/>
    </service>
    <service id="App\Domain\Transaction\Repository\TransactionRepository" class="App\Domain\Transaction\Repository\TransactionRepository" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydratorInterface"/>
      <argument type="service" id="transaction_collection"/>
    </service>
    <service id="App\Domain\Transaction\Service\Exception\TransactionServiceException" class="App\Domain\Transaction\Service\Exception\TransactionServiceException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Service\Statistics\Outlets\Exception\OutletNotFoundException" class="App\Domain\Transaction\Service\Statistics\Outlets\Exception\OutletNotFoundException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Service\Statistics\Outlets\OutletStatisticService" class="App\Domain\Transaction\Service\Statistics\Outlets\OutletStatisticService" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="App\Domain\Transaction\Repository\Statistics\Outlets\OutletStatisticRepository"/>
    </service>
    <service id="App\Domain\Transaction\Service\TransactionService" class="App\Domain\Transaction\Service\TransactionService" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="App\Domain\Transaction\Repository\TransactionRepository"/>
      <argument type="service" id="App\Domain\Transaction\Dispatcher\TransactionEventDispatcherInterface"/>
    </service>
    <service id="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber" class="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber" public="false" autowire="true" autoconfigure="true">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="app_domain_utility_validator_transaction_message_validator"/>
      <argument type="service" id="Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydratorInterface"/>
      <argument type="service" id="App\Domain\Transaction\Service\TransactionService"/>
    </service>
    <service id="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\Exception\CreateConsolidatedTransactionSubscriberException" class="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\Exception\CreateConsolidatedTransactionSubscriberException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\Exception\NotificationConsolidatedTransactionSubscriberException" class="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\Exception\NotificationConsolidatedTransactionSubscriberException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber" class="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber" public="false" autowire="true" autoconfigure="true">
      <tag name="kernel.event_subscriber"/>
      <argument type="service" id="App\Infrastructure\NotificationSystem\Client\ClientInterface"/>
      <argument type="service" id="Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydratorInterface"/>
    </service>
    <service id="App\Domain\Utility\Validator\Exception\InvalidDataException" class="App\Domain\Utility\Validator\Exception\InvalidDataException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Utility\Validator\Exception\JsonSchemaInvalidPathException" class="App\Domain\Utility\Validator\Exception\JsonSchemaInvalidPathException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Utility\Validator\Exception\JsonSchemaNotFoundException" class="App\Domain\Utility\Validator\Exception\JsonSchemaNotFoundException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Utility\Validator\JsonValidator" class="App\Domain\Utility\Validator\JsonValidator" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\NoSqlDatabase\Client\MongoDbClient" class="App\Infrastructure\NoSqlDatabase\Client\MongoDbClient" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="MongoDB\Client"/>
    </service>
    <service id="App\Infrastructure\NoSqlDatabase\Collection\Factory\MongoDbCollectionFactory" class="App\Infrastructure\NoSqlDatabase\Collection\Factory\MongoDbCollectionFactory" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="App\Infrastructure\NoSqlDatabase\Client\MongoDbClient"/>
    </service>
    <service id="App\Infrastructure\NoSqlDatabase\Collection\MongoDbCollection" class="App\Infrastructure\NoSqlDatabase\Collection\MongoDbCollection" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\NoSqlDatabase\Exception\NoSqlDatabaseException" class="App\Infrastructure\NoSqlDatabase\Exception\NoSqlDatabaseException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\NoSqlDatabase\PipelineBuilder\Statistic\TotalAmountPerOutletForPeriodPipelineBuilder" class="App\Infrastructure\NoSqlDatabase\PipelineBuilder\Statistic\TotalAmountPerOutletForPeriodPipelineBuilder" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\NotificationSystem\Client\Exception\NotificationSystemException" class="App\Infrastructure\NotificationSystem\Client\Exception\NotificationSystemException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\NotificationSystem\Client\SnsClient" class="App\Infrastructure\NotificationSystem\Client\SnsClient" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\QueueSystem\Client\Exception\QueueSystemException" class="App\Infrastructure\QueueSystem\Client\Exception\QueueSystemException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\QueueSystem\Client\SqsClient" class="App\Infrastructure\QueueSystem\Client\SqsClient" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Infrastructure\QueueSystem\Message\Exception\AttributeNotFoundException" class="App\Infrastructure\QueueSystem\Message\Exception\AttributeNotFoundException" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Kernel" class="App\Kernel" public="false" autowire="true" autoconfigure="true"/>
    <service id="App\Domain\Transaction\Dispatcher\TransactionEventDispatcherInterface" class="App\Domain\Transaction\Dispatcher\TransactionEventDispatcherSymfony" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="event_dispatcher"/>
    </service>
    <service id="json_schema_transaction_message_validator" class="JsonSchema\Validator" public="false" autowire="true" autoconfigure="true"/>
    <service id="app_domain_utility_validator_transaction_message_validator" class="App\Domain\Utility\Validator\JsonValidator" public="false" autowire="true" autoconfigure="true">
      <argument>/Users/waled/Projects/transaction-service/application/vendor/tsi-library/consolidated-transaction/schemas</argument>
      <argument>TransactionMessageRequest.json</argument>
      <argument type="service" id="json_schema_transaction_message_validator"/>
    </service>
    <service id="Aws\Sqs\SqsClient" class="Aws\Sqs\SqsClient" public="false" autowire="true" autoconfigure="true">
      <argument>%aws.config%</argument>
    </service>
    <service id="Aws\Sns\SnsClient" class="Aws\Sns\SnsClient" public="false" autowire="true" autoconfigure="true">
      <argument>%aws.config%</argument>
    </service>
    <service id="App\Infrastructure\QueueSystem\Client\ClientInterface" class="App\Infrastructure\QueueSystem\Client\SqsClient" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="Aws\Sqs\SqsClient"/>
      <argument>%env(AWS_SQS_QUEUE)%</argument>
    </service>
    <service id="App\Infrastructure\NotificationSystem\Client\ClientInterface" class="App\Infrastructure\NotificationSystem\Client\SnsClient" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="Aws\Sns\SnsClient"/>
      <argument>%env(AWS_SNS_TOPIC)%</argument>
    </service>
    <service id="MongoDB\Client" class="MongoDB\Client" public="false" autowire="true" autoconfigure="true">
      <argument>%env(MONGO_DB_URI)%</argument>
    </service>
    <service id="App\Infrastructure\NotificationSystem\PipelineBuilder\TotalAmountPerOutletForPeriodPipelineBuilderInterface" class="App\Infrastructure\NotificationSystem\PipelineBuilder\TotalAmountPerOutletForPeriodPipelineBuilderInterface" public="false" autowire="true" autoconfigure="true"/>
    <service id="transaction_collection" class="App\Infrastructure\NoSqlDatabase\Collection\MongoDbCollection" public="false" autowire="true" autoconfigure="true">
      <argument>transactions</argument>
      <argument>transactions</argument>
      <factory service="App\Infrastructure\NoSqlDatabase\Collection\Factory\MongoDbCollectionFactory" method="collection"/>
    </service>
    <service id="Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydratorInterface" class="Tsi\Transaction\Hydrator\ConsolidatedTransaction\ConsolidatedTransactionHydrator" public="false" autowire="true" autoconfigure="true">
      <argument type="service" id="Tsi\Transaction\Hydrator\Merchant\MerchantHydratorInterface"/>
      <argument type="service" id="Tsi\Transaction\Hydrator\Outlet\OutletHydratorInterface"/>
      <argument type="service" id="Tsi\Transaction\Hydrator\Customer\CustomerHydratorInterface"/>
      <argument type="service" id="Tsi\Transaction\Hydrator\Card\CardHydratorInterface"/>
      <argument type="service" id="Tsi\Transaction\Hydrator\Voucher\VoucherHydratorInterface"/>
    </service>
    <service id="Tsi\Transaction\Hydrator\Merchant\MerchantHydratorInterface" class="Tsi\Transaction\Hydrator\Merchant\MerchantHydrator" public="false" autowire="true" autoconfigure="true"/>
    <service id="Tsi\Transaction\Hydrator\Outlet\OutletHydratorInterface" class="Tsi\Transaction\Hydrator\Outlet\OutletHydrator" public="false" autowire="true" autoconfigure="true"/>
    <service id="Tsi\Transaction\Hydrator\Customer\CustomerHydratorInterface" class="Tsi\Transaction\Hydrator\Customer\CustomerHydrator" public="false" autowire="true" autoconfigure="true"/>
    <service id="Tsi\Transaction\Hydrator\Voucher\VoucherHydratorInterface" class="Tsi\Transaction\Hydrator\Voucher\VoucherHydrator" public="false" autowire="true" autoconfigure="true"/>
    <service id="Tsi\Transaction\Hydrator\Card\CardHydratorInterface" class="Tsi\Transaction\Hydrator\Card\CardHydrator" public="false" autowire="true" autoconfigure="true"/>
    <service id="controller_name_converter" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="kernel"/>
    </service>
    <service id="controller_resolver" class="Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver" public="false">
      <tag name="monolog.logger" channel="request"/>
      <argument type="service" id="service_container"/>
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
    </service>
    <service id="argument_metadata_factory" class="Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory" public="false"/>
    <service id="argument_resolver" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver" public="false">
      <argument type="service" id="argument_metadata_factory"/>
      <argument type="iterator">
        <argument type="service" id="argument_resolver.request_attribute"/>
        <argument type="service" id="argument_resolver.request"/>
        <argument type="service" id="argument_resolver.session"/>
        <argument type="service" id="argument_resolver.service"/>
        <argument type="service" id="argument_resolver.default"/>
        <argument type="service" id="argument_resolver.variadic"/>
      </argument>
    </service>
    <service id="argument_resolver.request_attribute" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="100"/>
    </service>
    <service id="argument_resolver.request" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.session" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="50"/>
    </service>
    <service id="argument_resolver.service" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-50"/>
      <argument type="service" id="service_locator.CmvrfkP"/>
    </service>
    <service id="argument_resolver.default" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-100"/>
    </service>
    <service id="argument_resolver.variadic" class="Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver" public="false">
      <tag name="controller.argument_value_resolver" priority="-150"/>
    </service>
    <service id="response_listener" class="Symfony\Component\HttpKernel\EventListener\ResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument>UTF-8</argument>
    </service>
    <service id="streamed_response_listener" class="Symfony\Component\HttpKernel\EventListener\StreamedResponseListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="locale_listener" class="Symfony\Component\HttpKernel\EventListener\LocaleListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="request_stack"/>
      <argument>en</argument>
      <argument type="service" id="router.default" on-invalid="ignore"/>
    </service>
    <service id="validate_request_listener" class="Symfony\Component\HttpKernel\EventListener\ValidateRequestListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
    </service>
    <service id="resolve_controller_name_subscriber" class="Symfony\Bundle\FrameworkBundle\EventListener\ResolveControllerNameSubscriber" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="controller_name_converter"/>
    </service>
    <service id="event_dispatcher" class="Symfony\Component\EventDispatcher\EventDispatcher" public="true">
      <tag name="container.hot_path"/>
      <call method="addListener">
        <argument>transaction.created</argument>
        <argument type="collection">
          <argument type="service" id="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber"/>
          <argument>onCreateAction</argument>
        </argument>
        <argument>100</argument>
      </call>
      <call method="addListener">
        <argument>consolidated-transaction.created</argument>
        <argument type="collection">
          <argument type="service" id="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber"/>
          <argument>onConsolidatedTransactionCreated</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.response</argument>
        <argument type="collection">
          <argument type="service" id="streamed_response_listener"/>
          <argument>onKernelResponse</argument>
        </argument>
        <argument>-1024</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>16</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="locale_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="validate_request_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>256</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="resolve_controller_name_subscriber"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>24</argument>
      </call>
      <call method="addListener">
        <argument>console.error</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleError</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>console.terminate</argument>
        <argument type="collection">
          <argument type="service" id="console.error_listener"/>
          <argument>onConsoleTerminate</argument>
        </argument>
        <argument>-128</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>console.command</argument>
        <argument type="collection">
          <argument type="service" id="debug.debug_handlers_listener"/>
          <argument>configure</argument>
        </argument>
        <argument>2048</argument>
      </call>
      <call method="addListener">
        <argument>kernel.request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelRequest</argument>
        </argument>
        <argument>32</argument>
      </call>
      <call method="addListener">
        <argument>kernel.finish_request</argument>
        <argument type="collection">
          <argument type="service" id="router_listener"/>
          <argument>onKernelFinishRequest</argument>
        </argument>
        <argument>0</argument>
      </call>
    </service>
    <service id="http_kernel" class="Symfony\Component\HttpKernel\HttpKernel" public="true">
      <tag name="container.hot_path"/>
      <argument type="service" id="event_dispatcher"/>
      <argument type="service" id="controller_resolver"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="argument_resolver"/>
    </service>
    <service id="request_stack" class="Symfony\Component\HttpFoundation\RequestStack" public="true"/>
    <service id="cache_warmer" class="Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate" public="true">
      <argument type="tagged" tag="kernel.cache_warmer"/>
    </service>
    <service id="cache_clearer" class="Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer" public="true">
      <argument type="tagged" tag="kernel.cache_clearer"/>
    </service>
    <service id="kernel" public="true" synthetic="true"/>
    <service id="filesystem" class="Symfony\Component\Filesystem\Filesystem" public="true"/>
    <service id="file_locator" class="Symfony\Component\HttpKernel\Config\FileLocator" public="false">
      <argument type="service" id="kernel"/>
      <argument>/Users/waled/Projects/transaction-service/application/src/Resources</argument>
      <argument type="collection">
        <argument>/Users/waled/Projects/transaction-service/application/src</argument>
      </argument>
    </service>
    <service id="uri_signer" class="Symfony\Component\HttpKernel\UriSigner" public="false">
      <argument>%env(APP_SECRET)%</argument>
    </service>
    <service id="config_cache_factory" class="Symfony\Component\Config\ResourceCheckerConfigCacheFactory" public="false">
      <argument type="tagged" tag="config_cache.resource_checker"/>
    </service>
    <service id="dependency_injection.config.container_parameters_resource_checker" class="Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-980"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="config.resource.self_checking_resource_checker" class="Symfony\Component\Config\Resource\SelfCheckingResourceChecker" public="false">
      <tag name="config_cache.resource_checker" priority="-990"/>
    </service>
    <service id="fragment.handler" class="Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler" public="false">
      <argument type="service" id="service_locator.GaqeV69"/>
      <argument type="service" id="request_stack"/>
      <argument>true</argument>
    </service>
    <service id="fragment.renderer.inline" class="Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer" public="false">
      <tag name="kernel.fragment_renderer" alias="inline"/>
      <argument type="service" id="http_kernel"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setFragmentPath">
        <argument>/_fragment</argument>
      </call>
    </service>
    <service id="console.error_listener" class="Symfony\Component\Console\EventListener\ErrorListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="console"/>
      <argument type="service" id="logger" on-invalid="null"/>
    </service>
    <service id="console.command.about" class="Symfony\Bundle\FrameworkBundle\Command\AboutCommand" public="false">
      <tag name="console.command" command="about"/>
      <call method="setName">
        <argument>about</argument>
      </call>
    </service>
    <service id="console.command.assets_install" class="Symfony\Bundle\FrameworkBundle\Command\AssetsInstallCommand" public="false">
      <tag name="console.command" command="assets:install"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>assets:install</argument>
      </call>
    </service>
    <service id="console.command.cache_clear" class="Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand" public="false">
      <tag name="console.command" command="cache:clear"/>
      <argument type="service" id="cache_clearer"/>
      <argument type="service" id="filesystem"/>
      <call method="setName">
        <argument>cache:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_clear" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand" public="false">
      <tag name="console.command" command="cache:pool:clear"/>
      <argument type="service" id="cache.global_clearer"/>
      <call method="setName">
        <argument>cache:pool:clear</argument>
      </call>
    </service>
    <service id="console.command.cache_pool_prune" class="Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand" public="false">
      <tag name="console.command" command="cache:pool:prune"/>
      <argument type="iterator"/>
      <call method="setName">
        <argument>cache:pool:prune</argument>
      </call>
    </service>
    <service id="console.command.cache_warmup" class="Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand" public="false">
      <tag name="console.command" command="cache:warmup"/>
      <argument type="service" id="cache_warmer"/>
      <call method="setName">
        <argument>cache:warmup</argument>
      </call>
    </service>
    <service id="console.command.config_debug" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand" public="false">
      <tag name="console.command" command="debug:config"/>
      <call method="setName">
        <argument>debug:config</argument>
      </call>
    </service>
    <service id="console.command.config_dump_reference" class="Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand" public="false">
      <tag name="console.command" command="config:dump-reference"/>
      <call method="setName">
        <argument>config:dump-reference</argument>
      </call>
    </service>
    <service id="console.command.container_debug" class="Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand" public="false">
      <tag name="console.command" command="debug:container"/>
      <call method="setName">
        <argument>debug:container</argument>
      </call>
    </service>
    <service id="console.command.debug_autowiring" class="Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand" public="false">
      <tag name="console.command" command="debug:autowiring"/>
      <call method="setName">
        <argument>debug:autowiring</argument>
      </call>
    </service>
    <service id="console.command.event_dispatcher_debug" class="Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand" public="false">
      <tag name="console.command" command="debug:event-dispatcher"/>
      <argument type="service" id="event_dispatcher"/>
      <call method="setName">
        <argument>debug:event-dispatcher</argument>
      </call>
    </service>
    <service id="console.command.router_debug" class="Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand" public="false">
      <tag name="console.command" command="debug:router"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>debug:router</argument>
      </call>
    </service>
    <service id="console.command.router_match" class="Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand" public="false">
      <tag name="console.command" command="router:match"/>
      <argument type="service" id="router.default"/>
      <call method="setName">
        <argument>router:match</argument>
      </call>
    </service>
    <service id="console.command.yaml_lint" class="Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand" public="false">
      <tag name="console.command" command="lint:yaml"/>
      <call method="setName">
        <argument>lint:yaml</argument>
      </call>
    </service>
    <service id="cache.app" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="true">
      <tag name="cache.pool"/>
      <argument>Gx5289GdS4</argument>
      <argument>0</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="true">
      <tag name="cache.pool"/>
      <argument>lC+DWxRqaq</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.validator" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>utuGHdN8Jc</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.serializer" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>WnbA6QFEl2</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.annotations" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false">
      <tag name="cache.pool"/>
      <argument>7DhUdv4C7e</argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.system" class="Symfony\Component\Cache\Adapter\AdapterInterface" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.system_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createSystemCache"/>
    </service>
    <service id="cache.adapter.apcu" class="Symfony\Component\Cache\Adapter\ApcuAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>%container.build_id%</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.doctrine" class="Symfony\Component\Cache\Adapter\DoctrineAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_doctrine_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.filesystem" class="Symfony\Component\Cache\Adapter\FilesystemAdapter" public="false" abstract="true">
      <tag name="cache.pool" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument>0</argument>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/pools</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.psr6" class="Symfony\Component\Cache\Adapter\ProxyAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_psr6_provider" clearer="cache.default_clearer"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
    </service>
    <service id="cache.adapter.redis" class="Symfony\Component\Cache\Adapter\RedisAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_redis_provider" clearer="cache.default_clearer"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.adapter.memcached" class="Symfony\Component\Cache\Adapter\MemcachedAdapter" public="false" abstract="true">
      <tag name="cache.pool" provider="cache.default_memcached_provider" clearer="cache.default_clearer" reset="reset"/>
      <tag name="monolog.logger" channel="cache"/>
      <argument></argument>
      <argument></argument>
      <argument>0</argument>
      <call method="setLogger">
        <argument type="service" id="logger" on-invalid="ignore"/>
      </call>
    </service>
    <service id="cache.default_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="false">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.system_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <tag name="kernel.cache_clearer"/>
      <argument type="collection">
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache.global_clearer" class="Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer" public="true">
      <tag name="cache.pool.clearer"/>
      <argument type="collection">
        <argument key="cache.app" type="service" id="cache.app" on-invalid="ignore_uninitialized"/>
        <argument key="cache.system" type="service" id="cache.system" on-invalid="ignore_uninitialized"/>
        <argument key="cache.validator" type="service" id="cache.validator" on-invalid="ignore_uninitialized"/>
        <argument key="cache.serializer" type="service" id="cache.serializer" on-invalid="ignore_uninitialized"/>
        <argument key="cache.annotations" type="service" id="cache.annotations" on-invalid="ignore_uninitialized"/>
      </argument>
    </service>
    <service id="cache_connection.GD_MSZC" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>redis://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id="cache_connection.JKE6keX" class="Symfony\Component\Cache\Adapter\AbstractAdapter" public="false">
      <argument>memcached://localhost</argument>
      <argument type="collection">
        <argument key="lazy">true</argument>
      </argument>
      <factory class="Symfony\Component\Cache\Adapter\AbstractAdapter" method="createConnection"/>
    </service>
    <service id="debug.debug_handlers_listener" class="Symfony\Component\HttpKernel\EventListener\DebugHandlersListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="php"/>
      <tag name="container.hot_path"/>
      <argument>null</argument>
      <argument type="service" id="logger" on-invalid="null"/>
      <argument>-1</argument>
      <argument>-1</argument>
      <argument>true</argument>
      <argument type="service" id="debug.file_link_formatter"/>
      <argument>true</argument>
    </service>
    <service id="debug.file_link_formatter" class="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" public="false">
      <argument>null</argument>
    </service>
    <service id="routing.resolver" class="Symfony\Component\Config\Loader\LoaderResolver" public="false">
      <call method="addLoader">
        <argument type="service" id="routing.loader.xml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.yml"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.php"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.glob"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.service"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.directory"/>
      </call>
      <call method="addLoader">
        <argument type="service" id="routing.loader.annotation.file"/>
      </call>
    </service>
    <service id="routing.loader.xml" class="Symfony\Component\Routing\Loader\XmlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.yml" class="Symfony\Component\Routing\Loader\YamlFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.php" class="Symfony\Component\Routing\Loader\PhpFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.glob" class="Symfony\Component\Config\Loader\GlobFileLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.directory" class="Symfony\Component\Routing\Loader\DirectoryLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="file_locator"/>
    </service>
    <service id="routing.loader.service" class="Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader" public="false">
      <tag name="routing.loader"/>
      <argument type="service" id="service_container"/>
    </service>
    <service id="routing.loader" class="Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader" public="true">
      <argument type="service" id="controller_name_converter"/>
      <argument type="service" id="routing.resolver"/>
    </service>
    <service id="router.default" class="Symfony\Bundle\FrameworkBundle\Routing\Router" public="false">
      <argument type="service" id="service_container"/>
      <argument>kernel:loadRoutes</argument>
      <argument type="collection">
        <argument key="cache_dir">/Users/waled/Projects/transaction-service/application/var/cache/dev</argument>
        <argument key="debug">true</argument>
        <argument key="generator_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_base_class">Symfony\Component\Routing\Generator\UrlGenerator</argument>
        <argument key="generator_dumper_class">Symfony\Component\Routing\Generator\Dumper\PhpGeneratorDumper</argument>
        <argument key="generator_cache_class">srcDevDebugProjectContainerUrlGenerator</argument>
        <argument key="matcher_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_base_class">Symfony\Bundle\FrameworkBundle\Routing\RedirectableUrlMatcher</argument>
        <argument key="matcher_dumper_class">Symfony\Component\Routing\Matcher\Dumper\PhpMatcherDumper</argument>
        <argument key="matcher_cache_class">srcDevDebugProjectContainerUrlMatcher</argument>
        <argument key="strict_requirements">true</argument>
        <argument key="resource_type">service</argument>
      </argument>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <call method="setConfigCacheFactory">
        <argument type="service" id="config_cache_factory"/>
      </call>
    </service>
    <service id="router.request_context" class="Symfony\Component\Routing\RequestContext" public="false">
      <argument></argument>
      <argument>GET</argument>
      <argument>localhost</argument>
      <argument>http</argument>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="router.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer" public="false">
      <tag name="container.service_subscriber" id="router"/>
      <tag name="kernel.cache_warmer"/>
      <tag name="container.service_subscriber.locator" id="service_locator.gvlXfzv.router.cache_warmer"/>
      <argument type="service" id="service_locator.gvlXfzv.router.cache_warmer"/>
    </service>
    <service id="router_listener" class="Symfony\Component\HttpKernel\EventListener\RouterListener" public="false">
      <tag name="kernel.event_subscriber"/>
      <tag name="monolog.logger" channel="request"/>
      <tag name="container.hot_path"/>
      <tag name="container.hot_path"/>
      <argument type="service" id="router.default"/>
      <argument type="service" id="request_stack"/>
      <argument type="service" id="router.request_context" on-invalid="ignore"/>
      <argument type="service" id="logger" on-invalid="ignore"/>
      <argument>/Users/waled/Projects/transaction-service/application</argument>
      <argument>true</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" class="Symfony\Bundle\FrameworkBundle\Controller\RedirectController" public="true">
      <argument type="service" id="router.default"/>
      <argument>80</argument>
      <argument>443</argument>
    </service>
    <service id="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" class="Symfony\Bundle\FrameworkBundle\Controller\TemplateController" public="true">
      <argument>null</argument>
      <argument>null</argument>
    </service>
    <service id="routing.loader.annotation" class="Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="annotations.cached_reader"/>
    </service>
    <service id="routing.loader.annotation.directory" class="Symfony\Component\Routing\Loader\AnnotationDirectoryLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="routing.loader.annotation.file" class="Symfony\Component\Routing\Loader\AnnotationFileLoader" public="false">
      <tag name="routing.loader" priority="-10"/>
      <argument type="service" id="file_locator"/>
      <argument type="service" id="routing.loader.annotation"/>
    </service>
    <service id="2_PhpArrayAdapter~c6VzpOu" class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" public="false">
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <factory class="Symfony\Component\Cache\Adapter\PhpArrayAdapter" method="create"/>
    </service>
    <service id="1_ArrayCache~c6VzpOu" class="Doctrine\Common\Cache\ArrayCache" public="false"/>
    <service id="annotations.reader" class="Doctrine\Common\Annotations\AnnotationReader" public="false">
      <call method="addGlobalIgnoredName">
        <argument>required</argument>
        <argument type="service" id="annotations.dummy_registry"/>
      </call>
    </service>
    <service id="annotations.dummy_registry" class="Doctrine\Common\Annotations\AnnotationRegistry" public="false">
      <call method="registerUniqueLoader">
        <argument>class_exists</argument>
      </call>
    </service>
    <service id="annotations.filesystem_cache" class="Doctrine\Common\Cache\FilesystemCache" public="false">
      <argument></argument>
    </service>
    <service id="annotations.cache_warmer" class="Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer" public="false">
      <tag name="kernel.cache_warmer"/>
      <argument type="service" id="annotations.reader"/>
      <argument>/Users/waled/Projects/transaction-service/application/var/cache/dev/annotations.php</argument>
      <argument type="service" id="cache.annotations"/>
      <argument>#^Symfony\\(?:Component\\HttpKernel\\|Bundle\\FrameworkBundle\\Controller\\(?!AbstractController$|Controller$))#</argument>
    </service>
    <service id="annotations.cache" class="Symfony\Component\Cache\DoctrineProvider" public="false">
      <argument type="service" id="2_PhpArrayAdapter~c6VzpOu"/>
    </service>
    <service id="instanceof.Symfony\Component\Console\Command\Command.0.App\Command\CreateTransactionCommand" class="App\Command\CreateTransactionCommand" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Command\CreateTransactionCommand" class="App\Command\CreateTransactionCommand" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\DefaultController" class="App\Controller\DefaultController" public="false" autowire="true" abstract="true"/>
    <service id="instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\DefaultController" class="App\Controller\DefaultController" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Controller\DefaultController" class="App\Controller\DefaultController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" class="App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" class="App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" class="App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\Rqms\Statistics\Outlets\IndexController" class="App\Controller\Rqms\Statistics\Outlets\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\Rqms\Statistics\Outlets\IndexController" class="App\Controller\Rqms\Statistics\Outlets\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Controller\Rqms\Statistics\Outlets\IndexController" class="App\Controller\Rqms\Statistics\Outlets\IndexController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\Rqms\Statistics\Search\IndexController" class="App\Controller\Rqms\Statistics\Search\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\Rqms\Statistics\Search\IndexController" class="App\Controller\Rqms\Statistics\Search\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Controller\Rqms\Statistics\Search\IndexController" class="App\Controller\Rqms\Statistics\Search\IndexController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\Rqms\Statistics\TPOnline\IndexController" class="App\Controller\Rqms\Statistics\TPOnline\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\Rqms\Statistics\TPOnline\IndexController" class="App\Controller\Rqms\Statistics\TPOnline\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Controller\Rqms\Statistics\TPOnline\IndexController" class="App\Controller\Rqms\Statistics\TPOnline\IndexController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\DependencyInjection\ServiceSubscriberInterface.0.App\Controller\Rqms\Statistics\Transaction\IndexController" class="App\Controller\Rqms\Statistics\Transaction\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="instanceof.Symfony\Bundle\FrameworkBundle\Controller\AbstractController.0.App\Controller\Rqms\Statistics\Transaction\IndexController" class="App\Controller\Rqms\Statistics\Transaction\IndexController" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Controller\Rqms\Statistics\Transaction\IndexController" class="App\Controller\Rqms\Statistics\Transaction\IndexController" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\EventDispatcher\EventSubscriberInterface.0.App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber" class="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber" class="App\Domain\Transaction\Subscriber\CreateConsolidatedTransaction\CreateConsolidatedTransactionSubscriber" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="instanceof.Symfony\Component\EventDispatcher\EventSubscriberInterface.0.App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber" class="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber" public="false" autowire="true" abstract="true"/>
    <service id="abstract.instanceof.App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber" class="App\Domain\Transaction\Subscriber\NotificationConsolidatedTransaction\NotificationConsolidatedTransactionSubscriber" public="false" autowire="true" autoconfigure="true" abstract="true"/>
    <service id="service_locator.veaHq2i" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="service_locator.LDjHv8s" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="service_locator.CmvrfkP" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection"/>
    </service>
    <service id="console.command_loader" class="Symfony\Component\Console\CommandLoader\ContainerCommandLoader" public="true">
      <argument type="service" id="service_locator.ATujKRV"/>
      <argument type="collection">
        <argument key="about">console.command.about</argument>
        <argument key="assets:install">console.command.assets_install</argument>
        <argument key="cache:clear">console.command.cache_clear</argument>
        <argument key="cache:pool:clear">console.command.cache_pool_clear</argument>
        <argument key="cache:pool:prune">console.command.cache_pool_prune</argument>
        <argument key="cache:warmup">console.command.cache_warmup</argument>
        <argument key="debug:config">console.command.config_debug</argument>
        <argument key="config:dump-reference">console.command.config_dump_reference</argument>
        <argument key="debug:container">console.command.container_debug</argument>
        <argument key="debug:autowiring">console.command.debug_autowiring</argument>
        <argument key="debug:event-dispatcher">console.command.event_dispatcher_debug</argument>
        <argument key="debug:router">console.command.router_debug</argument>
        <argument key="router:match">console.command.router_match</argument>
        <argument key="lint:yaml">console.command.yaml_lint</argument>
      </argument>
    </service>
    <service id="service_locator.ATujKRV" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="console.command.about" type="service" id="console.command.about"/>
        <argument key="console.command.assets_install" type="service" id="console.command.assets_install"/>
        <argument key="console.command.cache_clear" type="service" id="console.command.cache_clear"/>
        <argument key="console.command.cache_pool_clear" type="service" id="console.command.cache_pool_clear"/>
        <argument key="console.command.cache_pool_prune" type="service" id="console.command.cache_pool_prune"/>
        <argument key="console.command.cache_warmup" type="service" id="console.command.cache_warmup"/>
        <argument key="console.command.config_debug" type="service" id="console.command.config_debug"/>
        <argument key="console.command.config_dump_reference" type="service" id="console.command.config_dump_reference"/>
        <argument key="console.command.container_debug" type="service" id="console.command.container_debug"/>
        <argument key="console.command.debug_autowiring" type="service" id="console.command.debug_autowiring"/>
        <argument key="console.command.event_dispatcher_debug" type="service" id="console.command.event_dispatcher_debug"/>
        <argument key="console.command.router_debug" type="service" id="console.command.router_debug"/>
        <argument key="console.command.router_match" type="service" id="console.command.router_match"/>
        <argument key="console.command.yaml_lint" type="service" id="console.command.yaml_lint"/>
      </argument>
    </service>
    <service id="service_locator.GaqeV69" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="inline" type="service" id="fragment.renderer.inline"/>
      </argument>
    </service>
    <service id="logger" class="Symfony\Component\HttpKernel\Log\Logger" public="false"/>
    <service id="service_locator.aqxUcvZ" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="http_kernel" type="service" id="http_kernel" on-invalid="ignore"/>
        <argument key="request_stack" type="service" id="request_stack" on-invalid="ignore"/>
        <argument key="router" type="service" id="router.default" on-invalid="ignore"/>
      </argument>
    </service>
    <service id="service_locator.aqxUcvZ.App\Controller\DefaultController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\DefaultController</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.aqxUcvZ" method="withContext"/>
    </service>
    <service id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\ItalyOutlets\IndexController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\Rqms\Statistics\ItalyOutlets\IndexController</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.aqxUcvZ" method="withContext"/>
    </service>
    <service id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Outlets\IndexController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\Rqms\Statistics\Outlets\IndexController</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.aqxUcvZ" method="withContext"/>
    </service>
    <service id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Search\IndexController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\Rqms\Statistics\Search\IndexController</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.aqxUcvZ" method="withContext"/>
    </service>
    <service id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\TPOnline\IndexController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\Rqms\Statistics\TPOnline\IndexController</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.aqxUcvZ" method="withContext"/>
    </service>
    <service id="service_locator.aqxUcvZ.App\Controller\Rqms\Statistics\Transaction\IndexController" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>App\Controller\Rqms\Statistics\Transaction\IndexController</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.aqxUcvZ" method="withContext"/>
    </service>
    <service id="service_locator.gvlXfzv" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <tag name="container.service_locator"/>
      <argument type="collection">
        <argument key="router" type="service" id="router.default"/>
      </argument>
    </service>
    <service id="service_locator.gvlXfzv.router.cache_warmer" class="Symfony\Component\DependencyInjection\ServiceLocator" public="false">
      <argument>router.cache_warmer</argument>
      <argument type="service" id="service_container"/>
      <factory service="service_locator.gvlXfzv" method="withContext"/>
    </service>
    <service id="annotations.cached_reader" class="Doctrine\Common\Annotations\CachedReader" public="false">
      <tag name="annotations.cached_reader" provider="annotations.cache"/>
      <argument type="service" id="annotations.reader"/>
      <argument type="service" id="annotations.cache"/>
      <argument>true</argument>
    </service>
    <service id="Psr\Container\ContainerInterface" alias="service_container" public="false"/>
    <service id="Symfony\Component\DependencyInjection\ContainerInterface" alias="service_container" public="false"/>
    <service id="App\Domain\Action\FetchRawTransactions\FetchRawTransactionsInterface" alias="App\Domain\Action\FetchRawTransactions\FetchRawTransactions" public="false"/>
    <service id="App\Domain\Transaction\Entity\Outlet\Statistic\OutletStatisticEntityInterface" alias="App\Domain\Transaction\Entity\Outlet\Statistic\OutletStatisticEntity" public="false"/>
    <service id="App\Domain\Transaction\Entity\Search\Request\SearchRequestEntityInterface" alias="App\Domain\Transaction\Entity\Search\Request\SearchRequestEntity" public="false"/>
    <service id="App\Domain\Transaction\Event\ConsolidatedTransactionCreatedEventInterface" alias="App\Domain\Transaction\Event\ConsolidatedTransactionCreatedEvent" public="false"/>
    <service id="App\Domain\Transaction\Event\TransactionCreatedEvent\Collection\TransactionCreatedEventCollectionInterface" alias="App\Domain\Transaction\Event\TransactionCreatedEvent\Collection\TransactionCreatedEventCollection" public="false"/>
    <service id="App\Domain\Transaction\Event\TransactionCreatedEvent\TransactionCreatedEventInterface" alias="App\Domain\Transaction\Event\TransactionCreatedEvent\TransactionCreatedEvent" public="false"/>
    <service id="App\Domain\Transaction\Repository\Statistics\Outlets\OutletStatisticRepositoryInterface" alias="App\Domain\Transaction\Repository\Statistics\Outlets\OutletStatisticRepository" public="false"/>
    <service id="App\Domain\Transaction\Repository\TransactionRepositoryInterface" alias="App\Domain\Transaction\Repository\TransactionRepository" public="false"/>
    <service id="App\Domain\Transaction\Service\Statistics\Outlets\OutletStatisticServiceInterface" alias="App\Domain\Transaction\Service\Statistics\Outlets\OutletStatisticService" public="false"/>
    <service id="App\Domain\Transaction\Service\TransactionServiceInterface" alias="App\Domain\Transaction\Service\TransactionService" public="false"/>
    <service id="App\Domain\Utility\Validator\ValidatorInterface" alias="App\Domain\Utility\Validator\JsonValidator" public="false"/>
    <service id="App\Infrastructure\NoSqlDatabase\Client\NoSqlDatabaseClientInterface" alias="App\Infrastructure\NoSqlDatabase\Client\MongoDbClient" public="false"/>
    <service id="App\Infrastructure\NoSqlDatabase\Collection\NoSqlDatabaseCollectionInterface" alias="App\Infrastructure\NoSqlDatabase\Collection\MongoDbCollection" public="false"/>
    <service id="App\Infrastructure\NoSqlDatabase\PipelineBuilder\Statistic\TotalAmountPerOutletForPeriodPipelineBuilderInterface" alias="App\Infrastructure\NoSqlDatabase\PipelineBuilder\Statistic\TotalAmountPerOutletForPeriodPipelineBuilder" public="false"/>
    <service id="Symfony\Component\EventDispatcher\EventDispatcherInterface" alias="event_dispatcher" public="false"/>
    <service id="Symfony\Component\HttpKernel\HttpKernelInterface" alias="http_kernel" public="false"/>
    <service id="Symfony\Component\HttpFoundation\RequestStack" alias="request_stack" public="false"/>
    <service id="Symfony\Component\HttpKernel\KernelInterface" alias="kernel" public="false"/>
    <service id="Symfony\Component\Filesystem\Filesystem" alias="filesystem" public="false"/>
    <service id="Symfony\Component\HttpKernel\Config\FileLocator" alias="file_locator" public="false"/>
    <service id="cache.app_clearer" alias="cache.default_clearer" public="true"/>
    <service id="Psr\Cache\CacheItemPoolInterface" alias="cache.app" public="false"/>
    <service id="Symfony\Component\Cache\Adapter\AdapterInterface" alias="cache.app" public="false"/>
    <service id="cache.default_redis_provider" alias="cache_connection.GD_MSZC" public="false"/>
    <service id="cache.default_memcached_provider" alias="cache_connection.JKE6keX" public="false"/>
    <service id="Symfony\Component\HttpKernel\Debug\FileLinkFormatter" alias="debug.file_link_formatter" public="false"/>
    <service id="router" alias="router.default" public="true"/>
    <service id="Symfony\Component\Routing\RouterInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Generator\UrlGeneratorInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\Matcher\UrlMatcherInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContextAwareInterface" alias="router.default" public="false"/>
    <service id="Symfony\Component\Routing\RequestContext" alias="router.request_context" public="false"/>
    <service id="annotation_reader" alias="annotations.cached_reader"/>
    <service id="Doctrine\Common\Annotations\Reader" alias="annotations.cached_reader" public="false"/>
    <service id="console.command.public_alias.App\Command\CreateTransactionCommand" alias="App\Command\CreateTransactionCommand" public="true"/>
    <service id="Psr\Log\LoggerInterface" alias="logger" public="false"/>
  </services>
</container>
